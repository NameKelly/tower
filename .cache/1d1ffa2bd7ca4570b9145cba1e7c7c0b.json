{"id":"..\\node_modules\\antd\\lib\\_util\\type.js","dependencies":[{"name":"C:\\Users\\user\\Desktop\\铁塔\\tower\\node_modules\\antd\\package.json","includedInParent":true,"mtime":1577984109973},{"name":"C:\\Users\\user\\Desktop\\铁塔\\tower\\package.json","includedInParent":true,"mtime":1577981361515},{"name":"C:\\Users\\user\\Desktop\\铁塔\\tower\\.babelrc","includedInParent":true,"mtime":1577778028910}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.tupleNum = exports.tuple = void 0;\n\n// https://stackoverflow.com/questions/46176165/ways-to-get-string-literal-type-of-array-values-without-enum-overhead\nvar tuple = function tuple() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return args;\n};\n\nexports.tuple = tuple;\n\nvar tupleNum = function tupleNum() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  return args;\n};\n\nexports.tupleNum = tupleNum;","map":{"mappings":[{"source":"..\\node_modules\\antd\\lib\\_util\\type.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"..\\node_modules\\antd\\lib\\_util\\type.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"..\\node_modules\\antd\\lib\\_util\\type.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"..\\node_modules\\antd\\lib\\_util\\type.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"..\\node_modules\\antd\\lib\\_util\\type.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"..\\node_modules\\antd\\lib\\_util\\type.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"..\\node_modules\\antd\\lib\\_util\\type.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"..\\node_modules\\antd\\lib\\_util\\type.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"..\\node_modules\\antd\\lib\\_util\\type.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"..\\node_modules\\antd\\lib\\_util\\type.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"..\\node_modules\\antd\\lib\\_util\\type.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"..\\node_modules\\antd\\lib\\_util\\type.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"..\\node_modules\\antd\\lib\\_util\\type.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"..\\node_modules\\antd\\lib\\_util\\type.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"..\\node_modules\\antd\\lib\\_util\\type.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"..\\node_modules\\antd\\lib\\_util\\type.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"..\\node_modules\\antd\\lib\\_util\\type.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"..\\node_modules\\antd\\lib\\_util\\type.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"..\\node_modules\\antd\\lib\\_util\\type.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"..\\node_modules\\antd\\lib\\_util\\type.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"..\\node_modules\\antd\\lib\\_util\\type.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"..\\node_modules\\antd\\lib\\_util\\type.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"..\\node_modules\\antd\\lib\\_util\\type.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"..\\node_modules\\antd\\lib\\_util\\type.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"..\\node_modules\\antd\\lib\\_util\\type.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"..\\node_modules\\antd\\lib\\_util\\type.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"..\\node_modules\\antd\\lib\\_util\\type.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}}],"sources":{"..\\node_modules\\antd\\lib\\_util\\type.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.tupleNum = exports.tuple = void 0;\n\n// https://stackoverflow.com/questions/46176165/ways-to-get-string-literal-type-of-array-values-without-enum-overhead\nvar tuple = function tuple() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return args;\n};\n\nexports.tuple = tuple;\n\nvar tupleNum = function tupleNum() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  return args;\n};\n\nexports.tupleNum = tupleNum;"},"lineCount":27}},"hash":"1d87ca2a1b40fc808acbb766b87c2d5b","cacheData":{"env":{}}}